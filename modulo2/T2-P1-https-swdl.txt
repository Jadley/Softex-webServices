Os métodos HTTP são:

-GET: Essa é a requisição mais comum de todas. Através dessa requisição nós pedimos a representação de um recurso: que pode ser um arquivo html, xml, json, etc.
Um exemlo de requisição GET seria:

GET /entendendo-o-net-core-parte-3-o-coreclr/ HTTP/1.1  
User-Agent: Mozilla/4.0 (compatible; MSIE5.01; Windows NT)  
Host: http://jadley.com  
Connection: Keep-Alive  

-HEAD: O método HTTP HEAD solicita os cabeçalhos retornados de um recurso específico que foi requisitado por um método HTTP GET. Tal solicitação pode ser feita antes de baixar um grande recurso para economizar largura de banda, por exemplo.
Um exemplo de requisição HEAD seria: 
HEAD /echo/head/json HTTP/1.1
  Accept: application/json
  Host: reqbin.com

-POST: O método HTTP POST envia dados ao servidor. O tipo do corpo da solicitação é indicado pelo cabeçalho Content-Type.

A diferença entre PUT e POST é que PUT é idempotente: chamá-lo uma vez ou várias vezes sucessivamente tem o mesmo efeito (ou seja, nenhum efeito colateral), onde sucessivos POST idênticos podem ter efeitos adicionais, assim como passando uma ordem várias vezes.

Uma solicitação POST geralmente é enviada por meio de um formulário HTML e resulta em uma alteração no servidor.
Um exemlo de requisição POST seria:

POST / HTTP/1.1
Host: foo.com
Content-Type: application/x-www-form-urlencoded
Content-Length: 13

say=Hi&to=Mom

-PUT: O método de requisição HTTP PUT cria um novo recurso ou subsititui uma representação do recurso de destino com os novos dados.
Um exemlo de requisição PUT seria:

PUT /new.html HTTP/1.1
Host: example.com
Content-type: text/html
Content-length: 16

<p>New File</p>

-DELETE: O método de requisição HTTP DELETE remove o recurso especificado.
Um exemlo de requisição DELETE seria:

DELETE /arquivo.html HTTP/1.1

-CONNECT: O **médoto HTTP CONNECT **começa a comunicação bidirecional com o recurso solicitado. Ele pode ser usado para abrir um túnel.

Por exemplo, o método CONNECT pode ser utilizado para acessar websites que usam SSL (en-US) (HTTPS). O cliente solicita a um servidor proxy HTTP que tunelize a conexão TCP para o destino desejado. O servidor então procede para fazer a conexão em nome do cliente. Uma vez que a conexão foi estabelecida pelo servidor, o servidor Proxy continua a proxy do fluxo TCP para e do cliente.

CONNECT é um método hop-by-hop.
Um exemlo de requisição CONNECT seria:

CONNECT server.exemplo.com:80 HTTP/1.1
Host: server.exemplo.com:80
Proxy-Authorization: basic aGVsbG86d29ybGQ=

-OPTIONS: O **método HTTP OPTIONS **é utilizado para que um cliente possa descobrir quais as opções de requisição permitidas para um determinado recurso em um servidor. O cliente pode especificar uma URL específica no método OPTIONS ou um asterisco(*) indicando que se refere ao servidor como um todo para sanar suas dúvidas em relação as opções de requisição permitidas.
Um exemlo de requisição CONNECT seria:

curl -X OPTIONS http://example.org -i

-TRACE: O método **HTTP TRACE **realiza um teste de loopback enviando uma mensagem por todo o caminho até o recurso alvo no qual foi destinado, provendo um mecanismo útil para debug.

O destinatário final deve responder a mensagem recebida, excluindo alguns campos descritos abaixo, de volta para o client com um status code 200 (OK) e um cabeçalho Content-Type. O destinatário final pode ser o servidor de origem ou o primeiro servidor a receber a requisição com o cabeçalho Max-Forwards (en-US) com valor 0.
Um exeplo de requisição TRACE seria:

$ telnet 127.0.0.1 8080
Trying...
Connected to 127.0.0.1.
Escape character is '^]'.
TRACE / HTTP/1.0
Host: foo
A: b
C: d

HTTP/1.1 200 OK
Date: Mon, 04 Oct 2004 14:07:59 GMT
Server: IBM_HTTP_SERVER
Connection: close
Content-Type: message/http

TRACE / HTTP/1.0
A: b
C: d
Host: foo

Connection closed.

-PATCH: O método de requisição HTTP PATCH aplica modificações parciais a um recurso.

O método HTTP PUT permite apenas substituições completas de um documento. Em contraste ao PUT, o método PATCH não é idempotente, ou seja, requisições sucessivas idênticas podem obter efeitos distintos. Todavia, é possível realizar requisições PATCH de modo a serem idempotentes.

PATCH (assim como PUT) podem ter efeitos colaterais em outros recursos.

Para descobrir se um servidor dá suporte a PATCH, um servidor pode divulgar seu suporte adicionando tal suporte à lista no cabeçalho de resposta HTTP Allow ou Access-Control-Allow-Methods (para CORS).

Outra indicação (implícita) da permissão de PATCH é a presença do cabeçalho Accept-Patch, que especifica o formato do documento patch aceito pelo servidor.
Um exemplo de requisição PATCH seria:

PATCH /file.txt HTTP/1.1
Host: www.example.com
Content-Type: application/example
If-Match: "e0023aa4e"
Content-Length: 100

Web Services Description Language(WSDL):

WSDL é um a descrição em formato XML de um Web Service que utilizará SOAP / RPC como protocolo. É o acrônimo de Web Services Description Language (Linguagem de Descrição de Serviços Web).

RPC – Remote Procedure Calls (em português, chamada de procedimentos remotos) é um modelo que define a forma como são realizadas as chamadas a operações remotas através de web services.

Por meio de um WSDL você informa ao cliente como cada serviço em um end-point deve ser invocado: quais os parâmetros e tipo de dados de cada parâmetro é esperado, e qual o tipo de dado do retorno será enviado como resposta.

Além de descrever cada serviço (que pode ser comparado analogamente à um método a ser executado no programa servidor), também descreve como podem ser encontrados. Seus elementos básicos são:

<types>: aqui deverão ser descritos os tipos de dados suportados pelo serviço em questão

<message>: aqui devem ser especificados os padrões de entrada e saída de dados dos web services

<portType>: aqui devem ser descritos os agrupamentos lógicos das operações. São as operações executadas pelo web service

<binding>: aqui devem ser apresentados os protocolos de comunicação que os web services utilizam

<operation>: região que permite a especificação das assinaturas dos métodos disponibilizados

<definitions>: elemento padrão de todos os documentos WSDL. Permite efetuar descrições sobre schemas e namespaces



